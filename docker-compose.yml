services:
  postgres:
    container_name: video-hosting-demo-postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: development
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - video-hosting-demo

  # mongo:
  #   container_name: video-hosting-demo-mongo
  #   image: mongo:6.0
  #   entrypoint:
  #     - bash
  #     - -c
  #     - |
  #       exec docker-entrypoint.sh $$@
  #   command: mongod --replSet rs --bind_ip_all --keyFile config/keyfile --quiet --logpath /dev/null
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=root
  #     - MONGO_INITDB_ROOT_PASSWORD=root
  #   networks:
  #     - video-hosting-demo
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - .dev/mongo/config/keyfile:/config/keyfile
  #     - type: volume
  #       source: mongodb
  #       target: /data/db
  #     - type: volume
  #       source: mongodb-cfg
  #       target: /data/configdb
  # # mongo-replicator creates a replica set for transaction support
  # mongo-replicator:
  #   container_name: video-hosting-demo-mongo-replicator
  #   image: mongo:6.0
  #   entrypoint:
  #     - bash
  #     - -c
  #     - |
  #       cd /scripts
  #       chmod +x /setup.sh
  #       bash /setup.sh
  #   volumes:
  #     - ./bin/setup.sh:/setup.sh
  #     - ./bin:/scripts
  #   environment:
  #     - HOST=mongo
  #     - PORT=27017
  #     - USERNAME=root
  #     - PASSWORD=root
  #     - REPLICA_SET_NAME=rs
  #   networks:
  #     - video-hosting-demo
  #   depends_on:
  #     - mongo
  redis:
    container_name: video-hosting-demo-redis
    image: redis:5.0.5
    command: redis-server --appendonly yes
    hostname: redis
    networks:
      - video-hosting-demo
    ports:
      - 6379:6379
  api:
    container_name: video-hosting-demo-api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: development
      args:
        NODE_ENV: development
        APP_ENV: development
    networks:
      - video-hosting-demo
    volumes:
      - ./apps/api/src:/app/apps/api/src
      - mailer-volume:/app/packages/mailer
    ports:
      - 3001:3001
    depends_on:
      - redis
  # migrator:
  #   container_name: video-hosting-demo-migrator
  #   build:
  #     context: .
  #     dockerfile: ./apps/api/Dockerfile.migrator
  #     target: development
  #     args:
  #       NODE_ENV: development
  #       APP_ENV: development
  #   networks:
  #     - video-hosting-demo
  #   volumes:
  #     - ./apps/api/src:/app/apps/api/src
  #   depends_on:
  #     - mongo-replicator
  scheduler:
    container_name: video-hosting-demo-scheduler
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile.scheduler
      target: development
      args:
        NODE_ENV: development
        APP_ENV: development
    networks:
      - video-hosting-demo
    volumes:
      - ./apps/api/src:/app/apps/api/src
    # depends_on:
    #   - mongo-replicator
  web:
    container_name: video-hosting-demo-web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
      args:
        NODE_ENV: development
        APP_ENV: development
    volumes:
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
    networks:
      - video-hosting-demo
    ports:
      - 3002:3002
  mailer:
    container_name: video-hosting-demo-mailer
    build:
      context: .
      dockerfile: ./packages/mailer/Dockerfile
      target: development
      args:
        NODE_ENV: development
        APP_ENV: development
    volumes:
      - mailer-volume:/app/packages/mailer/dist
      - ./packages/mailer/emails:/app/packages/mailer/emails
      - ./packages/mailer/src:/app/packages/mailer/src
    networks:
      - video-hosting-demo
    ports:
      - 3003:3003
networks:
  video-hosting-demo:
    name: video-hosting-demo-network

volumes:
  postgres_data:
  # mongodb:
  # mongodb-cfg:
  mailer-volume:
